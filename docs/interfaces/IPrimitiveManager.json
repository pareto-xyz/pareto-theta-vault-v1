{
  "methods": {
    "allocate(address,bytes32,address,address,uint256,uint256,bool,uint256)": {
      "stateMutability": "payable",
      "code": "function allocate(address recipient, bytes32 poolId, address risky, address stable, uint256 delRisky, uint256 delStable, bool fromMargin, uint256 minLiquidityOut) external payable returns (uint256 delLiquidity)",
      "inputs": {
        "recipient": {
          "type": "address",
          "description": "Address that receives minted ERC-1155 Primitive liquidity tokens"
        },
        "poolId": {
          "type": "bytes32",
          "description": "Id of the pool"
        },
        "risky": {
          "type": "address",
          "description": "Address of the risky asset"
        },
        "stable": {
          "type": "address",
          "description": "Address of the stable asset"
        },
        "delRisky": {
          "type": "uint256",
          "description": "Amount of risky tokens to allocate"
        },
        "delStable": {
          "type": "uint256",
          "description": "Amount of stable tokens to allocate"
        },
        "fromMargin": {
          "type": "bool",
          "description": "True if the funds of the sender should be used"
        },
        "minLiquidityOut": {
          "type": "uint256"
        }
      },
      "outputs": {
        "delLiquidity": {
          "type": "uint256",
          "description": " Amount of liquidity allocated into the pool"
        }
      },
      "notice": "Allocates liquidity into a pool"
    },
    "allocateCallback(uint256,uint256,bytes)": {
      "stateMutability": "nonpayable",
      "code": "function allocateCallback(uint256 delRisky, uint256 delStable, bytes data) external nonpayable",
      "inputs": {
        "delRisky": {
          "type": "uint256",
          "description": "Amount of risky tokens required to provide to risky reserve"
        },
        "delStable": {
          "type": "uint256",
          "description": "Amount of stable tokens required to provide to stable reserve"
        },
        "data": {
          "type": "bytes",
          "description": "Calldata passed on allocate function call"
        }
      },
      "outputs": {},
      "notice": "Triggered when providing liquidity to an Engine"
    },
    "create(address,address,uint128,uint32,uint32,uint32,uint256,uint256)": {
      "stateMutability": "payable",
      "code": "function create(address risky, address stable, uint128 strike, uint32 sigma, uint32 maturity, uint32 gamma, uint256 riskyPerLp, uint256 delLiquidity) external payable returns (bytes32 poolId, uint256 delRisky, uint256 delStable)",
      "inputs": {
        "risky": {
          "type": "address",
          "description": "Address of the risky asset"
        },
        "stable": {
          "type": "address",
          "description": "Address of the stable asset"
        },
        "strike": {
          "type": "uint128",
          "description": "Strike price of the pool to calibrate to, with the same decimals as the stable token"
        },
        "sigma": {
          "type": "uint32",
          "description": "Volatility to calibrate to as an unsigned 256-bit integer w/ precision of 1e4, 10000 = 100%"
        },
        "maturity": {
          "type": "uint32",
          "description": "Maturity timestamp of the pool, in seconds"
        },
        "gamma": {
          "type": "uint32",
          "description": "Multiplied against swap in amounts to apply fee, equal to 1 - fee %, an unsigned 32-bit integer, w/ precision of 1e4, 10000 = 100%"
        },
        "riskyPerLp": {
          "type": "uint256",
          "description": "Risky reserve per liq. with risky decimals, = 1 - N(d1), d1 = (ln(S/K)+(r*sigma^2/2))/sigma*sqrt(tau)"
        },
        "delLiquidity": {
          "type": "uint256",
          "description": "Amount of liquidity to allocate to the curve, wei value with 18 decimals of precision"
        }
      },
      "outputs": {
        "poolId": {
          "type": "bytes32",
          "description": "      Id of the new created pool (Keccak256 hash of the engine address, maturity, sigma and strike)"
        },
        "delRisky": {
          "type": "uint256",
          "description": "    Amount of risky tokens allocated into the pool"
        },
        "delStable": {
          "type": "uint256",
          "description": "   Amount of stable tokens allocated into the pool"
        }
      },
      "notice": "Creates a new pool using the specified parameters"
    },
    "createCallback(uint256,uint256,bytes)": {
      "stateMutability": "nonpayable",
      "code": "function createCallback(uint256 delRisky, uint256 delStable, bytes data) external nonpayable",
      "inputs": {
        "delRisky": {
          "type": "uint256",
          "description": "Amount of risky tokens required to initialize risky reserve"
        },
        "delStable": {
          "type": "uint256",
          "description": "Amount of stable tokens required to initialize stable reserve"
        },
        "data": {
          "type": "bytes",
          "description": "Calldata passed on create function call"
        }
      },
      "outputs": {},
      "notice": "Triggered when creating a new pool for an Engine"
    },
    "remove(address,bytes32,uint256,uint256,uint256)": {
      "stateMutability": "nonpayable",
      "code": "function remove(address engine, bytes32 poolId, uint256 delLiquidity, uint256 minRiskyOut, uint256 minStableOut) external nonpayable returns (uint256 delRisky, uint256 delStable)",
      "inputs": {
        "engine": {
          "type": "address",
          "description": "Address of the engine"
        },
        "poolId": {
          "type": "bytes32",
          "description": "Id of the pool"
        },
        "delLiquidity": {
          "type": "uint256",
          "description": "Amount of liquidity to remove"
        },
        "minRiskyOut": {
          "type": "uint256",
          "description": "Minimum amount of risky tokens expected to be received"
        },
        "minStableOut": {
          "type": "uint256",
          "description": "Minimum amount of stable tokens expected to be received"
        }
      },
      "outputs": {
        "delRisky": {
          "type": "uint256",
          "description": "    Amount of risky tokens removed from the pool"
        },
        "delStable": {
          "type": "uint256",
          "description": "   Amount of stable tokens removed from the pool"
        }
      },
      "notice": "Removes liquidity from a pool"
    },
    "withdraw(address,address,uint256,uint256)": {
      "stateMutability": "nonpayable",
      "code": "function withdraw(address recipient, address engine, uint256 delRisky, uint256 delStable) external nonpayable",
      "inputs": {
        "recipient": {
          "type": "address",
          "description": "Address receiving the funds in their wallet"
        },
        "engine": {
          "type": "address",
          "description": "Primitive Engine to withdraw from"
        },
        "delRisky": {
          "type": "uint256",
          "description": "Amount of risky token to withdraw"
        },
        "delStable": {
          "type": "uint256",
          "description": "Amount of stable token to withdraw"
        }
      },
      "outputs": {},
      "notice": "Withdraws funds from the margin of a Primitive Engine"
    }
  },
  "events": {
    "Allocate": {
      "code": "event Allocate(address payer, address indexed recipient, address indexed engine, bytes32 indexed poolId, uint256 delLiquidity, uint256 delRisky, uint256 delStable, bool fromMargin)",
      "inputs": {
        "payer": {
          "type": "address",
          "indexed": false,
          "description": "Payer sending liquidity"
        },
        "recipient": {
          "type": "address",
          "indexed": true,
          "description": "Address that receives minted ERC-1155 Primitive liquidity tokens"
        },
        "engine": {
          "type": "address",
          "indexed": true,
          "description": "Primitive Engine receiving liquidity"
        },
        "poolId": {
          "type": "bytes32",
          "indexed": true,
          "description": "Id of the pool receiving liquidity"
        },
        "delLiquidity": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of liquidity allocated"
        },
        "delRisky": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of risky tokens allocated"
        },
        "delStable": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of stable tokens allocated"
        },
        "fromMargin": {
          "type": "bool",
          "indexed": false,
          "description": "True if liquidity was paid from margin"
        }
      },
      "notice": "Emitted when liquidity is allocated"
    },
    "Create": {
      "code": "event Create(address indexed payer, address indexed engine, bytes32 indexed poolId, uint128 strike, uint32 sigma, uint32 maturity, uint32 gamma, uint256 delLiquidity)",
      "inputs": {
        "payer": {
          "type": "address",
          "indexed": true,
          "description": "Payer sending liquidity"
        },
        "engine": {
          "type": "address",
          "indexed": true,
          "description": "Primitive Engine where the pool is created"
        },
        "poolId": {
          "type": "bytes32",
          "indexed": true,
          "description": "Id of the new pool"
        },
        "strike": {
          "type": "uint128",
          "indexed": false,
          "description": "Strike of the new pool"
        },
        "sigma": {
          "type": "uint32",
          "indexed": false,
          "description": "Sigma of the new pool"
        },
        "maturity": {
          "type": "uint32",
          "indexed": false,
          "description": "Maturity of the new pool"
        },
        "gamma": {
          "type": "uint32",
          "indexed": false,
          "description": "Gamma of the new pool"
        },
        "delLiquidity": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of liquidity allocated (minus the minimum liquidity)"
        }
      },
      "notice": "Emitted when a new pool is created"
    },
    "Remove": {
      "code": "event Remove(address indexed payer, address indexed engine, bytes32 indexed poolId, uint256 delLiquidity, uint256 delRisky, uint256 delStable)",
      "inputs": {
        "payer": {
          "type": "address",
          "indexed": true,
          "description": "Payer receiving liquidity"
        },
        "engine": {
          "type": "address",
          "indexed": true,
          "description": "Engine where liquidity is removed from"
        },
        "poolId": {
          "type": "bytes32",
          "indexed": true,
          "description": "Id of the pool where liquidity is removed from"
        },
        "delLiquidity": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of liquidity removed"
        },
        "delRisky": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of risky tokens allocated"
        },
        "delStable": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of stable tokens allocated"
        }
      },
      "notice": "Emitted when liquidity is removed"
    },
    "Withdraw": {
      "code": "event Withdraw(address indexed payer, address indexed recipient, address indexed engine, address risky, address stable, uint256 delRisky, uint256 delStable)",
      "inputs": {
        "payer": {
          "type": "address",
          "indexed": true,
          "description": "Address withdrawing the funds"
        },
        "recipient": {
          "type": "address",
          "indexed": true,
          "description": "Address receiving the funds in their wallet"
        },
        "engine": {
          "type": "address",
          "indexed": true,
          "description": "Engine where the funds are withdrawn from"
        },
        "risky": {
          "type": "address",
          "indexed": false,
          "description": "Address of the risky token"
        },
        "stable": {
          "type": "address",
          "indexed": false,
          "description": "Address of the stable token"
        },
        "delRisky": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of withdrawn risky"
        },
        "delStable": {
          "type": "uint256",
          "indexed": false,
          "description": "Amount of withdrawn stable"
        }
      },
      "notice": "Emitted when funds are withdrawn"
    }
  },
  "errors": {
    "MinLiquidityOutError": {
      "code": "error MinLiquidityOutError()",
      "inputs": {},
      "notice": "Thrown when the received liquidity is lower than the expected"
    },
    "MinRemoveOutError": {
      "code": "error MinRemoveOutError()",
      "inputs": {},
      "notice": "Thrown when the received risky / stable amounts are lower than the expected"
    },
    "ZeroLiquidityError": {
      "code": "error ZeroLiquidityError()",
      "inputs": {},
      "notice": "Thrown when trying to add or remove zero liquidity"
    }
  },
  "path": "/interfaces",
  "title": "Interface of PrimitiveManager contract",
  "details": "Taken from https://raw.githubusercontent.com/primitivefinance/rmm-managerEdited to contain the Withdraw event and withdrawal function",
  "author": "Primitive, Pareto",
  "name": "IPrimitiveManager"
}
