{
  "methods": {
    "MIN_LIQUIDITY_FACTOR()": {
      "stateMutability": "pure",
      "code": "function MIN_LIQUIDITY_FACTOR() external pure returns (uint256)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "uint256"
        }
      },
      "notice": "Used to scale the minimum amount of liquidity to lowest precision",
      "details": "E.g. if the lowest decimal token is 6, min liquidity w/ 18 decimals                 cannot be 1000 wei, therefore the token decimals                 divided by the min liquidity factor is the amount of minimum liquidity                 MIN_LIQUIDITY = 10 ^ (Decimals / MIN_LIQUIDITY_FACTOR)"
    },
    "args()": {
      "stateMutability": "view",
      "code": "function args() external view returns (address factory, address risky, address stable, uint256 scaleFactorRisky, uint256 scaleFactorStable, uint256 minLiquidity)",
      "inputs": {},
      "outputs": {
        "factory": {
          "type": "address",
          "description": "           Smart contract deploying the Engine contract"
        },
        "risky": {
          "type": "address",
          "description": "             Risky token"
        },
        "stable": {
          "type": "address",
          "description": "            Stable token"
        },
        "scaleFactorRisky": {
          "type": "uint256",
          "description": "  Scale factor of the risky token, 10^(18 - riskyTokenDecimals)"
        },
        "scaleFactorStable": {
          "type": "uint256",
          "description": " Scale factor of the stable token, 10^(18 - stableTokenDecimals)"
        },
        "minLiquidity": {
          "type": "uint256",
          "description": "      Minimum amount of liquidity on pool creation"
        }
      },
      "notice": "Called within Engine constructor so Engine can set immutable                            variables without constructor args"
    },
    "deploy(address,address)": {
      "stateMutability": "nonpayable",
      "code": "function deploy(address risky, address stable) external nonpayable returns (address engine)",
      "inputs": {
        "risky": {
          "type": "address",
          "description": "Risky token, the underlying token"
        },
        "stable": {
          "type": "address",
          "description": "Stable token, the quote token"
        }
      },
      "outputs": {
        "engine": {
          "type": "address"
        }
      },
      "notice": "Deploys a new Engine contract and sets the `getEngine` mapping for the tokens"
    },
    "deployer()": {
      "stateMutability": "view",
      "code": "function deployer() external view returns (address)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "address",
          "description": "Deployer of this factory contract"
        }
      },
      "notice": "Deployer does not have any access controls to wield"
    },
    "getEngine(address,address)": {
      "stateMutability": "view",
      "code": "function getEngine(address risky, address stable) external view returns (address engine)",
      "inputs": {
        "risky": {
          "type": "address",
          "description": "Risky token, the underlying token"
        },
        "stable": {
          "type": "address",
          "description": "Stable token, the quote token"
        }
      },
      "outputs": {
        "engine": {
          "type": "address",
          "description": " Engine address for a risky and stable token"
        }
      },
      "notice": "Fetches engine address of a token pair which has been deployed from this factory"
    }
  },
  "events": {
    "DeployEngine": {
      "code": "event DeployEngine(address indexed from, address indexed risky, address indexed stable, address engine)",
      "inputs": {
        "from": {
          "type": "address",
          "indexed": true,
          "description": "Calling `msg.sender` of deploy"
        },
        "risky": {
          "type": "address",
          "indexed": true,
          "description": "Risky token of Engine to deploy"
        },
        "stable": {
          "type": "address",
          "indexed": true,
          "description": "Stable token of Engine to deploy"
        },
        "engine": {
          "type": "address",
          "indexed": false,
          "description": "Deployed engine address"
        }
      },
      "notice": "Created a new engine contract!"
    }
  },
  "errors": {},
  "path": "efi/rmm-core/contracts/interfaces",
  "title": "Primitive Factory Interface",
  "author": "Primitive",
  "name": "IPrimitiveFactory"
}
