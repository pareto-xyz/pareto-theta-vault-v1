{
  "methods": {
    "BUFFER()": {
      "stateMutability": "view",
      "code": "function BUFFER() external view returns (uint256)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "uint256",
          "description": "Amount of seconds after pool expiry which allows swaps, no swaps after buffer"
        }
      }
    },
    "MIN_LIQUIDITY()": {
      "stateMutability": "view",
      "code": "function MIN_LIQUIDITY() external view returns (uint256)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "uint256",
          "description": "Amount of liquidity burned on `create()` calls"
        }
      }
    },
    "PRECISION()": {
      "stateMutability": "view",
      "code": "function PRECISION() external view returns (uint256)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "uint256",
          "description": "Precision units to scale to when doing token related calculations"
        }
      }
    },
    "calibrations(bytes32)": {
      "stateMutability": "view",
      "code": "function calibrations(bytes32 poolId) external view returns (uint128 strike, uint32 sigma, uint32 maturity, uint32 lastTimestamp, uint32 gamma)",
      "inputs": {
        "poolId": {
          "type": "bytes32",
          "description": "Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"
        }
      },
      "outputs": {
        "strike": {
          "type": "uint128",
          "description": "         Marginal price of the pool's risky token at maturity, with the same decimals as the stable token, valid [0, 2^128-1]"
        },
        "sigma": {
          "type": "uint32",
          "description": "          AKA Implied Volatility in basis points, determines the price impact of swaps, valid for (1, 10_000_000)"
        },
        "maturity": {
          "type": "uint32",
          "description": "       Timestamp which starts the BUFFER countdown until swaps will cease, in seconds, valid for (block.timestamp, 2^32-1]"
        },
        "lastTimestamp": {
          "type": "uint32",
          "description": "  Last timestamp used to calculate time until expiry, aka \"tau\""
        },
        "gamma": {
          "type": "uint32",
          "description": "          Multiplied against swap in amounts to apply fee, equal to 1 - fee % but units are in basis points, valid for (9_000, 10_000)"
        }
      },
      "notice": "Fetches `Calibration` pool parameters"
    },
    "factory()": {
      "stateMutability": "view",
      "code": "function factory() external view returns (address)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "address"
        }
      }
    },
    "invariantOf(bytes32)": {
      "stateMutability": "view",
      "code": "function invariantOf(bytes32 poolId) external view returns (int128 invariant)",
      "inputs": {
        "poolId": {
          "type": "bytes32",
          "description": "Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"
        }
      },
      "outputs": {
        "invariant": {
          "type": "int128",
          "description": "  Signed fixed point 64.64 number, invariant of `poolId`"
        }
      },
      "notice": "Fetches the current invariant, notation is usually `k`, based on risky and stable token reserves of pool with `poolId`"
    },
    "liquidity(address,bytes32)": {
      "stateMutability": "view",
      "code": "function liquidity(address account, bytes32 poolId) external view returns (uint256 liquidity)",
      "inputs": {
        "account": {
          "type": "address"
        },
        "poolId": {
          "type": "bytes32",
          "description": "Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"
        }
      },
      "outputs": {
        "liquidity": {
          "type": "uint256",
          "description": "  Liquidity owned by `account` in `poolId`"
        }
      },
      "notice": "Fetches position liquidity an account address and poolId"
    },
    "margins(address)": {
      "stateMutability": "view",
      "code": "function margins(address account) external view returns (uint128 balanceRisky, uint128 balanceStable)",
      "inputs": {
        "account": {
          "type": "address",
          "description": "Margin account to fetch"
        }
      },
      "outputs": {
        "balanceRisky": {
          "type": "uint128",
          "description": "   Balance of the risky token"
        },
        "balanceStable": {
          "type": "uint128",
          "description": "  Balance of the stable token"
        }
      },
      "notice": "Fetches the margin balances of `account`"
    },
    "reserves(bytes32)": {
      "stateMutability": "view",
      "code": "function reserves(bytes32 poolId) external view returns (uint128 reserveRisky, uint128 reserveStable, uint128 liquidity, uint32 blockTimestamp, uint256 cumulativeRisky, uint256 cumulativeStable, uint256 cumulativeLiquidity)",
      "inputs": {
        "poolId": {
          "type": "bytes32",
          "description": "Keccak256 hash of the engine address, strike, sigma, maturity, and gamma"
        }
      },
      "outputs": {
        "reserveRisky": {
          "type": "uint128",
          "description": "        Risky token balance in the reserve"
        },
        "reserveStable": {
          "type": "uint128",
          "description": "       Stable token balance in the reserve"
        },
        "liquidity": {
          "type": "uint128",
          "description": "           Total supply of liquidity for the curve"
        },
        "blockTimestamp": {
          "type": "uint32",
          "description": "      Timestamp when the cumulative reserve values were last updated"
        },
        "cumulativeRisky": {
          "type": "uint256",
          "description": "     Cumulative sum of risky token reserves of the previous update"
        },
        "cumulativeStable": {
          "type": "uint256",
          "description": "    Cumulative sum of stable token reserves of the previous update"
        },
        "cumulativeLiquidity": {
          "type": "uint256",
          "description": " Cumulative sum of total supply of liquidity of the previous update"
        }
      },
      "notice": "Fetches the global reserve state for a pool with `poolId`"
    },
    "risky()": {
      "stateMutability": "view",
      "code": "function risky() external view returns (address)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "address"
        }
      }
    },
    "scaleFactorRisky()": {
      "stateMutability": "view",
      "code": "function scaleFactorRisky() external view returns (uint256)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "uint256",
          "description": "Multiplier to scale amounts to/from, equal to 10^(18 - riskyDecimals)"
        }
      }
    },
    "scaleFactorStable()": {
      "stateMutability": "view",
      "code": "function scaleFactorStable() external view returns (uint256)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "uint256",
          "description": "Multiplier to scale amounts to/from, equal to 10^(18 - stableDecimals)"
        }
      }
    },
    "stable()": {
      "stateMutability": "view",
      "code": "function stable() external view returns (address)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "address",
          "description": "Stable token address, a more accurate name is the quote token"
        }
      }
    }
  },
  "events": {},
  "errors": {},
  "path": "efi/rmm-core/contracts/interfaces/engine",
  "title": "View functions of the Primitive Engine contract",
  "author": "Primitive",
  "name": "IPrimitiveEngineView"
}
